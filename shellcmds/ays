#!/usr/bin/env jspython

from JumpScale.tools import cmdutils
import JumpScale.baselib.atyourservice
import functools
from JumpScale import j
import sys
j.application.start('ays')

parser = cmdutils.ArgumentParser()
j.logger.enabled = True
j.logger.consolelogCategories.append('atyourserviceAction')

commands = ['init', 'install', 'list', 'stop', 'start', 'restart', 'build', 'prepare', "mdupdate", "update", "reset", "resetstate",
            "removedata", "monitor", "configure", "cleanup", "export", "import", "uninstall", "push", "execute",
            "status", "check","nodes", "console", "hrdpath", "makelocal", "apply", "applyprint"]

help = """
ays commands:
    init:
    - is the start of everthing, this action makes sure that the ays instance gets created locally & all arguments properly filled in
    - do not forget to specify which other service you consume e.g. $role/$domain|$name!$instance,$role2/$name2!$instance2,$role3/$name2,$role4
    apply: (applyprint will do same but only print step it will do)
    - walk over all known ays and apply their state
    - ays is smart enough to know what it needs to do: install, configure, start, stop, ...
    check:
    - walk over all known ays check the action & template files, see if change
    - check if instance files changed
    install: (avoid doing this manually, apply will do this automatically)
    - download all related git repo's (if not downloaded yet, otherwise update)
    - prepare & copyfiles & configure
    - start the app
    list:
    - list the ayses
    stop-start-restart
    build
    - if build instructions are given the build repo's will be downloaded & build started
    - build happens to production dir
    mdupdate
    - update all git repo's which have services metadata
    update
    - go over all related repo's & do an update
    - copy the files again
    - restart the app
    reset
    - remove build repo's !!!
    - remove state of the app (same as resetstate) in jumpscale (the configuration info)
    - remove data of the app
    resetstate
    - remove state of the app (same as resetstate) in jumpscale (the configuration info)
    removedata
    - remove data of app (e.g. database, e.g. vmachine when node ays)
    execute
    - execute cmd on service e.g. ssh cmd on node ays or sql statement on database ...
    - use --cmd with to specify command to be execute
    monitor
    - do uptime check, local monitor & remote monitor check, if all ok return True
    configure (avoid doing this manually, apply will do this automatically)
    - configure the app
    cleanup
    - remote old logfiles, ...
    export/import
    - use --url to specify where to import from or export to
    create
    - interactively create a ays
    status
    - display status of installed ayses (domain, name, priority, version, port)
    nodes
    - display all remote nodes available for ays remote execution
    console
    - connect thourgh ssh to remote node
    hrdpath
    - return the path to the hrd directory
"""

parser.add_argument("action", choices=commands, help='Command to perform\n')
parser.add_argument("--noremote", required=False, action='store_true', help='bypass the @remote wrapper\n', default=False)

group = parser.add_argument_group(title="Service Selection")
group.add_argument('-q', '--quiet', required=False, action='store_true', help='Put in quiet mode')
group.add_argument('-n', '--name', required=False, help='Name of ays to be installed', default="")
group.add_argument('-d', '--domain', required=False, help='Name of ays domain to be installed', default="")
group.add_argument('-i', '--instance', required=False, help='Instance of ays (default main)', default="")
group.add_argument('--role', required=False, help='Role of ays', default="")
group.add_argument('-f', '--force', required=False, action='store_true', help='auto answer yes on every question')
group.add_argument('--nodeps', required=False, action='store_true', help='Don\'t perfomr action on dependencies, default False', default=False)
group.add_argument('--verbose', required=False, action='store_true', default=False, help='Verbose output.')
group.add_argument('--local', required=False, action='store_true', default=False, help='Apply action locally. No remote services will be executed.')

# group.add_argument('-tn', '--targetname', required=False, default=None, help='node instance on which to execute the action')
# group.add_argument('-tt', '--targettype', required=False, default=None, help='node type on which to execute the action')
# group.add_argument('--lua',required=False,default=False,action="store_true",help='execute from actions.lua file')

# install
group = parser.add_argument_group(title="Install/Update/Expand/Configure")
group.add_argument('--data', required=False, help='use this to pass hrd information to ays e.g. \'redis.name:system redis.port:9999 redis.disk:0\'')
group.add_argument('--cmd', required=False, help='use this to pass cmd to services e.g. \'ls -l\'')
group.add_argument('--parent', required=False, default='', help='parent service ($domain|$name!$instance@role).')
# group.add_argument('--immediate', required=False, action='store_true',# default=False, help='use this to get the first level match of services')
group.add_argument('-r', '--reinstall', required=False, action='store_true', help='Reinstall found service')
group.add_argument('-s', '--single', required=False, action='store_true', help='Do not install dependencies')
group.add_argument('-c', '--consume', required=False, default="", help='specify which services you consume example syntax: e.g. $domain|$name!$instance@role,$domain|$name!$instance@role')
# export/import
group = parser.add_argument_group(title="Export/Import")
group.add_argument('--url', required=False, help='uncpath to export to or import from')

# list
group = parser.add_argument_group(title="List")
group.add_argument('--installed', required=False, action='store_true', default=None, help='List installed ayses')

group = parser.add_argument_group(title="Make Local")
group.add_argument('--tolocal', required=False, help='Comma-seperated list of services to be localized')

group = parser.add_argument_group(title='Build')
group.add_argument('--host', required=False, help="key of the build server e.g: 'node.ssh!buildserver' ")
group.add_argument('--build', required=False, default=False, action='store_true', help="enable building of docker image before building the service")
group.add_argument('--push', required=False, default=False, action='store_true', help="push the docker image after building it.")
group.add_argument('--debug', required=False, default=False, action='store_true', help="don't clean the docker_build after build. usefull to debug if an error happen durin building")


def sorter(ays1, ays2):
    prio1 = ays1.getPriority()
    prio2 = ays2.getPriority()
    if prio1 != prio2:
        return (prio1 > prio2) - (prio1 < prio2)
    else:
        key1 = "%s_%s" % (ays1.domain, ays2.name)
        key2 = "%s_%s" % (ays2.domain, ays2.name)
        return (key1 > key2) - (key1 < key2)


def getHRDData(args):
    hrddata = {}
    if args.data is not None:
        if args.data.find("#") != -1:
            for line in args.data.split("#"):
                if line.find("=") != -1:
                    var, data = line.split("=", 1)
                    hrddata[var.strip()] = data.strip()
        else:
            tags = j.core.tags.getObject(args.data)
            hrddata = tags.getDict()
    return hrddata

def getParent(args):
    if args.parent is None or (isinstance(args.parent, str) is True and args.parent == ''):
        return None
    if not isinstance(args.parent, str):
        return args.parent
    return j.atyourservice.getServiceFromKey(args.parent)

def getTarget(args):
    return j.atyourservice.get(name=(args.targettype or ''), instance=(args.targetname or ''),
                               parent=getParent(args))

def getServices(args, filterRemote=False, onlyRemote=False):
    res = []
    services = j.atyourservice.findServices(domain=args.domain, name=args.name, instance=args.instance, role=args.role, parent=getParent(args))
    if args.noremote:
        # means we are installing over ssh, so we need to tell service to do everything local
        for service in services:
            service.noremote = True
            service.hrd.delete('producer.node')
            service.hrd.save()
    if args.cmd:
        for service in services:
            service.cmd = args.cmd
    if filterRemote:
        for s in services:
            if len(s.hrd.getDictFromPrefix('producer.node')) == 0:
                res.append(s)
    elif onlyRemote:
        for s in services:
            if 'node' in s.producers:
                res.append(s)
    else:
        res = services
    return res

if '--help' in sys.argv or '-h' in sys.argv:
    print(help)

args = parser.parse_args()
args.deps = not args.nodeps

# aysargs = {}
# if args.node!=None:
#     aysargs["node2execute"]=args.node
# if args.lua!=None:
#     aysargs["lua"]=args.lua

# if args.cmd is not None:
    # aysargs['cmd'] = args.cmd.strip()


j.application.debug = args.verbose

if args.quiet:
    class NullDevice():

        def write(self, s):
            pass
    sys.stdout = NullDevice()

if args.action=="apply":
    j.atyourservice.apply()
elif args.action=="check":
    j.atyourservice.check()
elif args.action=="applyprint":
    j.atyourservice.applyprint()
elif args.action=="install" or args.action == 'init':

    if args.instance == "":
        args.instance = 'main'

    if args.noremote:
        service = j.atyourservice.getService(domain=args.domain, name=args.name, instance=args.instance)
        service.noremote = args.noremote
        j.application.noremote = args.noremote
        if service.hrd.exists('instance.producer.node'):
            service.hrd.delete('instance.producer.node')
        service.args = getHRDData(args)
    else:
        tmpls = j.atyourservice.findTemplates(domain=args.domain, name=args.name)
        if len(tmpls) > 1:
            print(tmpls)
            raise RuntimeError("multiple templates found for %s__%s. Be more precise please" % (args.domain,args.name))
        if len(tmpls) <= 0:
            raise RuntimeError("no templates found for %s__%s. Be more precise please" % (args.domain, args.name))

        service = tmpls[0].newInstance(instance=args.instance, args=getHRDData(args), parent=getParent(args),consume=args.consume)

        service.init()

elif args.action == 'console':
    target = getTarget(args)
    if not target:
        raise RuntimeError('No target with targettype "%s" and targetname "%s" was found' % (args.targettype, args.targetname))
    target.cmd = 'bash'
    j.remote.cuisine.fabric.env['output_prefix'] = False
    j.remote.cuisine.fabric.env['linewise'] = False
    j.remote.cuisine.fabric.env['remote_interrupt'] = True
    target.execute()

elif args.action == 'hrdpath':
    print(j.dirs.ays)

# elif args.action == 'makelocal':
#     if args.tolocal and j.sal.fs.exists(args.tolocal):
#         servicefiles = j.sal.fs.walk(args.tolocal, recurse=1, pattern='service.hrd', return_folders=0, return_files=1, followSoftlinks=False)
#         for servicefile in servicefiles:
#             remotehrd = j.core.hrd.get(servicefile, prefixWithName=False)
#             remotehrd.delete('producer.node')
#             remotehrd.delete('service.parent')
#             remotehrd.save()

# if args.targettype or args.targetname:
    # args.parent = getTarget(args)
if args.action not in ['build']:
    services = getServices(args, filterRemote=args.local)

if args.action == 'configure':
    for service in services:
        service.configure()
        service.start()

elif args.action == 'prepare':
    for service in services:
        service.prepare()

elif args.action == 'install':
    service.install(start=True)

elif args.action == 'update':
    for service in services:
        service.update(reinstall=args.reinstall)

elif args.action == 'monitor':
    # TODO
    pass

elif args.action == 'publish':
    # TODO
    pass

elif args.action == 'reset':
    for service in services:
        service.reset()

elif args.action == 'removedata':
    for service in services:
        service.removedata()

elif args.action == 'resetstate':
    for service in services:
        service.resetstate()

elif args.action == 'export':
    # TODO
    pass

elif args.action == 'import':
    # TODO
    pass

elif args.action == 'restart':
    for service in services:
        service.restart()

elif args.action == 'start':
    for service in sorted(services, key=functools.cmp_to_key(sorter)):
        service.start()

elif args.action == 'stop':
    for service in sorted(services, key=functools.cmp_to_key(sorter)):
        service.stop()

elif args.action == 'execute':
    for service in sorted(services, key=functools.cmp_to_key(sorter)):
        # service.args['cmd'] = args.cmd
        eval("service.actions.%s(service)"%args.cmd)
        # service.execute()

elif args.action == 'build':
    if args.host == '':
        raise RuntimeError('you need to specify a build servier with --host')

    tmpls = j.atyourservice.findTemplates(domain=args.domain, name=args.name)
    if len(tmpls) > 1:
        print(tmpls)
        raise RuntimeError("multiple templates found for %s__%s. Be more precise please" % (args.domain,args.name))
    if len(tmpls) <= 0:
        raise RuntimeError("no templates found for %s__%s. Be more precise please" % (args.domain, args.name))
    tmpls[0].build(build_server=args.host, image_build=args.build, image_push=args.build, debug=args.debug)


elif args.action == 'uninstall':
    import ipdb;ipdb.set_trace()
    for service in sorted(services, key=functools.cmp_to_key(sorter)):
        service.uninstall()

elif args.action == 'consume':
    for service in sorted(services, key=functools.cmp_to_key(sorter)):
        service.consume(args.producer, args.category)

# elif args.action == 'produce':
#     services = getServices(args, parent=args.parent, precise=args.immediate)
#     for service in sorted(services, key=functools.cmp_to_key(sorter)):
#         service.()

elif args.action == 'push':
    # TODO
    pass

elif args.action == 'mdupdate':
    j.atyourservice.updateTemplatesRepo()

elif args.action == 'list':
    # def printServices(services, installed=False):
    #     if installed:
    #         form = '%(domain)-15s %(name)-25s %(instance)-25s %(parent)-20s'
    #         print form % {'domain': 'DOMAIN', 'name': 'NAME', 'instance': 'INSTANCE', "parent": "PARENT"}
    #     else:
    #         form = '%(domain)-15s %(name)-25s'
    #         print form % {'domain': 'DOMAIN', 'name': 'NAME'}
    #     print
    #     print '=' * 110
    #     print ''
    #     for service in sorted(services, key=lambda p: "%s_%s" % (p.domain, p.name)):
    #         if installed:
    #             print form % {'name': service.name, 'domain': service.domain, 'instance': service.instance, 'parent': service.parent}
    #         else:
    #             print form % {'name': service.name, 'domain': service.domain}
    if not args.installed:
        services = j.atyourservice.findTemplates(args.domain, args.name)

    for item in services:
        print(item)


    # printServices(services, installed=args.installed)

elif args.action == 'status':
    j.logger.consolelogCategories.remove('atyourserviceAction')
    # dont leave categories empty
    j.logger.consolelogCategories.append('nologs')

    def printServices(services):

        form = '%(domain)-15s %(name)-20s %(instance)-10s %(prio)4s %(status)-8s %(ports)s'
        print(form % {'domain': 'DOMAIN', 'name': 'NAME', 'instance': 'Instance', 'prio': 'Prio', 'status': 'Status',
                      'ports': 'Ports'})
        print('=' * 70)
        print('')
        for service in sorted(services, key=functools.cmp_to_key(sorter)):
            if not service.getProcessDicts():
                continue
            isrunning = service.actions.check_up_local(service, wait=False)
            status = 'RUNNING' if isrunning else 'HALTED'
            ports = ', '.join(str(x) for x in service.getTCPPorts())
            print(form % {'name': service.name, 'domain': service.domain, 'instance': service.instance, 'prio': service.getPriority(), 'status': status, 'ports': ports})

    printServices(services)

elif args.action == 'nodes':
    def printNodes(allNodes):

        form = '%(type)-15s %(instance)-10s'
        print(form % {'type': 'TYPE', 'instance': 'INSTANCE'})
        print('=' * 25)
        for node in allNodes:
            print('')
            print(form % {'type': node.name, 'instance': node.instance})

    allNodes = getServices(args, onlyRemote=True)
    printNodes(allNodes)

j.application.stop()
j.logger.enabled = False
